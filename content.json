{"meta":{"title":"wyx99","subtitle":"","description":"","author":"wyx 99","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"MyFirstArticle","slug":"MyFirstArticle","date":"2019-12-06T06:13:27.000Z","updated":"2019-12-06T07:27:32.526Z","comments":true,"path":"2019/12/06/MyFirstArticle/","link":"","permalink":"http://yoursite.com/2019/12/06/MyFirstArticle/","excerpt":"","text":"1.equals(),hashcode()，==**之间的区别1、equals 和 hashcode 方法都是Object 类中的方法。 equals 和== ，equals若不重写的话，equals本质是==. 2、equals 与hashcode的不同 java对与equals和hashcode方法 如果两个对象的hashcode相同，他们并不一定相等 如果两个对象的equals()相同，那么他们的hashcode值一定相同 (上述 可能是由于哈希码 在生成的过程中产生的冲突造成的) 3、== 1.比较基本数据类型： byte short int long char double folt boolean 是比较他们的值 2.比较引用类型：比较的是他们在内存中的地址。== 是对栈中的内存进行比较。 equals（）不重写的话 本质就是== ，equals重写后是比较堆中的值，比较的是内容。 4、equals重写 1.equals重写时候总是要重写hashcode， 2.hashcode方法一般在集合中使用 3.当覆盖了equals方法后(列如：string类，method类)，比较对象将通过覆盖后的equals方法进行比较 test","categories":[],"tags":[]},{"title":"MyFirstArticle","slug":"Test02","date":"2019-12-06T06:13:27.000Z","updated":"2019-12-06T07:35:20.995Z","comments":true,"path":"2019/12/06/Test02/","link":"","permalink":"http://yoursite.com/2019/12/06/Test02/","excerpt":"","text":"1.equals(),hashcode()，==**之间的区别1、equals 和 hashcode 方法都是Object 类中的方法。 equals 和== ，equals若不重写的话，equals本质是==. 2、equals 与hashcode的不同 java对与equals和hashcode方法 如果两个对象的hashcode相同，他们并不一定相等 如果两个对象的equals()相同，那么他们的hashcode值一定相同 (上述 可能是由于哈希码 在生成的过程中产生的冲突造成的) 3、== 1.比较基本数据类型： byte short int long char double folt boolean 是比较他们的值 2.比较引用类型：比较的是他们在内存中的地址。== 是对栈中的内存进行比较。 equals（）不重写的话 本质就是== ，equals重写后是比较堆中的值，比较的是内容。 4、equals重写 1.equals重写时候总是要重写hashcode， 2.hashcode方法一般在集合中使用 3.当覆盖了equals方法后(列如：string类，method类)，比较对象将通过覆盖后的equals方法进行比较","categories":[],"tags":[]}]}